plugins {
    id 'fabric-loom' version '1.6-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods becausegradle
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/"
    }
    maven { url "https://maven.siphalor.de" }
    maven { url 'https://maven.wispforest.io' }
    maven { url = "https://jitpack.io" }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    //mappings loom.officialMojangMappings()
    /*mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.20.1:2023.09.03@zip")
    }*/
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "dev.emi:emi-fabric:${emi_version}"
    modImplementation "de.siphalor:capsaicin-1.20:${capsaicin_version}"

    // MixinSquared
    include(implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.1.2-beta.4")))

    // Lavender
    dependencies {
        modImplementation "io.wispforest:lavender:${project.lavender_version}"
        include "io.wispforest:owo-sentinel:${project.owo_version}"
    }

    // Reacharound
    modImplementation "maven.modrinth:r3VgI4QN:uk6tRHW7"

    // Spice of Fabric
    modImplementation "maven.modrinth:roxihOCb:JQeNIIvU"

    // AppleSkin
    modImplementation "maven.modrinth:EsAfCjCV:xcauwnEB"

    // Enchanted Shulkers
    modImplementation "maven.modrinth:vUi6HFie:4YXMZuAk"

    // Farmer's Delight
    modImplementation "maven.modrinth:4EakbH8e:QXYNitXw"

    // Fabric Language Kotlin
    modImplementation "maven.modrinth:Ha28R6CL:ZMokinzs"

    // Polymer
    modImplementation "maven.modrinth:xGdtZczs:3ii2xU3x"

    // Cloth Config
    modImplementation "maven.modrinth:9s6osm5g:J3FLptsi"

    // Guarding
    modImplementation "maven.modrinth:aV1COQ7a:zz7EL9j5"

    // Presence Footsteps
    modImplementation "maven.modrinth:rcTfTZr3:KAmTaDGR"

    // Fabric Seasons
    modImplementation "maven.modrinth:KJe6y9Eu:uMEzKato"

    // Chalk
    modImplementation "maven.modrinth:OrtjXTCH:jWMVQdZu"

    // ImmediatelyFast
    modImplementation "maven.modrinth:5ZwdcRci:FEOsWs1E"

    // Sodium
    modImplementation "maven.modrinth:AANobbMI:mhZtY2lR"

    // Iris
    modImplementation "maven.modrinth:YL57xq9U:JHbrO6Zq"

    // Charm
    implementation files("run/mods/charm-fabric-1.20.1-6.0.21.jar")
    implementation files("jij-libs/charmony-fabric-1.20.1-6.15.1.jar")
}

loom {
    accessWidenerPath = file("src/main/resources/affogatotweaks.accesswidener")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}
tasks.register("moveBuiltJars", Copy) {
    def remapJar = project.tasks.named('remapJar')
    dependsOn remapJar
    from remapJar
    into '/home/pajic/.local/share/PrismLauncher/instances/ab35/.minecraft/mods/'
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
